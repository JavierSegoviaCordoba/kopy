FILE: simple-copy-update-each-custom-parameter.kt
    package com.javiersc.kotlin.kopy.playground

    public final fun diagnostics(): R|kotlin/Unit| {
        lval foo0: R|com/javiersc/kotlin/kopy/playground/Foo| = R|com/javiersc/kotlin/kopy/playground/Foo.Foo|(R|kotlin/collections/listOf|<R|kotlin/Int|>(vararg(Int(7), Int(2))), Char(W))
        lval foo21: R|com/javiersc/kotlin/kopy/playground/Foo| = R|<local>/foo0|.R|com/javiersc/kotlin/kopy/playground/Foo.copy|(copy@fun R|com/javiersc/kotlin/kopy/playground/Foo|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            (this@R|special/anonymous|, this@R|special/anonymous|.R|com/javiersc/kotlin/kopy/playground/Foo.numbers|).R|com/javiersc/kotlin/kopy/playground/Foo.updateEach|<R|kotlin/Int|>(<L> = updateEach@fun <anonymous>(num: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
                ^ R|<local>/num|.R|kotlin/Int.plus|(Int(42))
            }
            )
        }
        )
    }
    @R|com/javiersc/kotlin/kopy/Kopy|() public final data class Foo : R|kotlin/Any| {
        public constructor(numbers: R|kotlin/collections/List<kotlin/Int>|, letter: R|kotlin/Char|): R|com/javiersc/kotlin/kopy/playground/Foo| {
            super<R|kotlin/Any|>()
        }

        public final val numbers: R|kotlin/collections/List<kotlin/Int>| = R|<local>/numbers|
            public get(): R|kotlin/collections/List<kotlin/Int>|

        public final val letter: R|kotlin/Char| = R|<local>/letter|
            public get(): R|kotlin/Char|

        public final operator fun component1(): R|kotlin/collections/List<kotlin/Int>|

        public final operator fun component2(): R|kotlin/Char|

        public final fun copy(numbers: R|kotlin/collections/List<kotlin/Int>| = this@R|com/javiersc/kotlin/kopy/playground/Foo|.R|com/javiersc/kotlin/kopy/playground/Foo.numbers|, letter: R|kotlin/Char| = this@R|com/javiersc/kotlin/kopy/playground/Foo|.R|com/javiersc/kotlin/kopy/playground/Foo.letter|): R|com/javiersc/kotlin/kopy/playground/Foo|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdate|() public final infix fun <U> R|U|.update(transform: R|(U) -> U|): R|kotlin/Unit| {
        }

        public final val _atomic: R|kotlinx/atomicfu/AtomicRef<com/javiersc/kotlin/kopy/playground/Foo>|
            public get(): R|kotlinx/atomicfu/AtomicRef<com/javiersc/kotlin/kopy/playground/Foo>|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionSet|() public final infix fun <S> R|S|.set(other: R|S|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionCopy|() public final infix fun copy(copy: R|com/javiersc/kotlin/kopy/playground/Foo.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Foo| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdateEach|() public final infix fun <UE> R|kotlin/collections/Iterable<UE>|.updateEach(transform: R|(UE) -> UE|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionInvoke|() public final operator infix fun invoke(copy: R|com/javiersc/kotlin/kopy/playground/Foo.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Foo| {
        }

    }
