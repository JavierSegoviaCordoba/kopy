FILE: simple-1.kt
    package com.javiersc.kotlin.kopy.playground

    public final fun box(): R|kotlin/String| {
        lval roni: R|com/javiersc/kotlin/kopy/playground/Pet| = R|com/javiersc/kotlin/kopy/playground/Pet.Pet|(String(Roni), Int(7))
        lval house: R|com/javiersc/kotlin/kopy/playground/House| = R|com/javiersc/kotlin/kopy/playground/House.House|(String(House), R|<local>/roni|)
        lval house1: R|com/javiersc/kotlin/kopy/playground/House| = R|<local>/house|.R|com/javiersc/kotlin/kopy/playground/House.copy|(R|<local>/house|.R|com/javiersc/kotlin/kopy/playground/House.pet|.R|com/javiersc/kotlin/kopy/playground/Pet.copy|(String(Roni 2)))
        lval house2: R|com/javiersc/kotlin/kopy/playground/House| = R|<local>/house|.R|com/javiersc/kotlin/kopy/playground/House.copy|(copy@fun R|com/javiersc/kotlin/kopy/playground/House|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            (this@R|special/anonymous|, this@R|special/anonymous|.R|com/javiersc/kotlin/kopy/playground/House.pet|.R|com/javiersc/kotlin/kopy/playground/Pet.name|).R|com/javiersc/kotlin/kopy/playground/House.set|<R|kotlin/String|>(String(Roni 2))
        }
        )
        lval isOk: R|kotlin/Boolean| = ==(R|<local>/house1|, R|<local>/house2|)
        ^box when () {
            R|<local>/isOk| ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: ), R|<local>/house1|, String( is not equal to ), R|<local>/house2|)
            }
        }

    }
    @R|com/javiersc/kotlin/kopy/Kopy|() public final data class House : R|kotlin/Any| {
        public constructor(street: R|kotlin/String|, pet: R|com/javiersc/kotlin/kopy/playground/Pet|): R|com/javiersc/kotlin/kopy/playground/House| {
            super<R|kotlin/Any|>()
        }

        public final val street: R|kotlin/String| = R|<local>/street|
            public get(): R|kotlin/String|

        public final val pet: R|com/javiersc/kotlin/kopy/playground/Pet| = R|<local>/pet|
            public get(): R|com/javiersc/kotlin/kopy/playground/Pet|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|com/javiersc/kotlin/kopy/playground/Pet|

        public final fun copy(street: R|kotlin/String| = this@R|com/javiersc/kotlin/kopy/playground/House|.R|com/javiersc/kotlin/kopy/playground/House.street|, pet: R|com/javiersc/kotlin/kopy/playground/Pet| = this@R|com/javiersc/kotlin/kopy/playground/House|.R|com/javiersc/kotlin/kopy/playground/House.pet|): R|com/javiersc/kotlin/kopy/playground/House|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionCopy|() public final infix fun copy(copy: R|com/javiersc/kotlin/kopy/playground/House.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/House| {
        }

        internal final val _atomic: R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/House>|
            internal get(): R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/House>|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionInvoke|() public final operator infix fun invoke(copy: R|com/javiersc/kotlin/kopy/playground/House.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/House| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionSet|() public final infix fun <S> R|S|.set(other: R|S|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdate|() public final infix fun <U> R|U|.update(transform: R|(U) -> U|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdateEach|() public final infix fun <UE> R|kotlin/collections/Iterable<UE>|.updateEach(transform: R|(UE) -> UE|): R|kotlin/Unit| {
        }

    }
    @R|com/javiersc/kotlin/kopy/Kopy|() public final data class Pet : R|kotlin/Any| {
        public constructor(name: R|kotlin/String|, age: R|kotlin/Int|): R|com/javiersc/kotlin/kopy/playground/Pet| {
            super<R|kotlin/Any|>()
        }

        public final val name: R|kotlin/String| = R|<local>/name|
            public get(): R|kotlin/String|

        public final val age: R|kotlin/Int| = R|<local>/age|
            public get(): R|kotlin/Int|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|kotlin/Int|

        public final fun copy(name: R|kotlin/String| = this@R|com/javiersc/kotlin/kopy/playground/Pet|.R|com/javiersc/kotlin/kopy/playground/Pet.name|, age: R|kotlin/Int| = this@R|com/javiersc/kotlin/kopy/playground/Pet|.R|com/javiersc/kotlin/kopy/playground/Pet.age|): R|com/javiersc/kotlin/kopy/playground/Pet|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionCopy|() public final infix fun copy(copy: R|com/javiersc/kotlin/kopy/playground/Pet.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Pet| {
        }

        internal final val _atomic: R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/Pet>|
            internal get(): R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/Pet>|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionInvoke|() public final operator infix fun invoke(copy: R|com/javiersc/kotlin/kopy/playground/Pet.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Pet| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionSet|() public final infix fun <S> R|S|.set(other: R|S|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdate|() public final infix fun <U> R|U|.update(transform: R|(U) -> U|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdateEach|() public final infix fun <UE> R|kotlin/collections/Iterable<UE>|.updateEach(transform: R|(UE) -> UE|): R|kotlin/Unit| {
        }

    }
