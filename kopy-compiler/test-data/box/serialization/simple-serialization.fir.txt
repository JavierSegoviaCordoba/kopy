FILE: a.kt
    package kotlinx.serialization

    @R|kotlin/annotation/MustBeDocumented|() @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.CLASS|, Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|)) public final annotation class Serializable : R|kotlin/Annotation| {
        public constructor(): R|kotlinx/serialization/Serializable| {
            super<R|kotlin/Any|>()
        }

    }
    @R|kotlin/annotation/MustBeDocumented|() @R|kotlin/annotation/Target|(allowedTargets = vararg(Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.PROPERTY|)) public final annotation class Transient : R|kotlin/Annotation| {
        public constructor(): R|kotlinx/serialization/Transient| {
            super<R|kotlin/Any|>()
        }

    }
FILE: b.kt
    package com.javiersc.kotlin.kopy.playground

    public final fun box(): R|kotlin/String| {
        lval foo: R|com/javiersc/kotlin/kopy/playground/Foo| = R|com/javiersc/kotlin/kopy/playground/Foo.Foo|(R|com/javiersc/kotlin/kopy/playground/Bar.Bar|(Int(41)))
        lval foo2: R|com/javiersc/kotlin/kopy/playground/Foo| = R|<local>/foo|.R|com/javiersc/kotlin/kopy/playground/Foo.copy|(copy@fun R|com/javiersc/kotlin/kopy/playground/Foo|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            (this@R|special/anonymous|, this@R|special/anonymous|.R|com/javiersc/kotlin/kopy/playground/Foo.bar|.R|com/javiersc/kotlin/kopy/playground/Bar.age|).R|com/javiersc/kotlin/kopy/playground/Foo.set|<R|kotlin/Int|>(Int(42))
        }
        )
        lval isOk: R|kotlin/Boolean| = ==(R|<local>/foo2|.R|com/javiersc/kotlin/kopy/playground/Foo.bar|.R|com/javiersc/kotlin/kopy/playground/Bar.age|, Int(42))
        ^box when () {
            R|<local>/isOk| ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: ), R|<local>/foo2|)
            }
        }

    }
    @R|com/javiersc/kotlin/kopy/Kopy|() public final data class Foo : R|kotlin/Any| {
        public constructor(bar: R|com/javiersc/kotlin/kopy/playground/Bar|): R|com/javiersc/kotlin/kopy/playground/Foo| {
            super<R|kotlin/Any|>()
        }

        public final val bar: R|com/javiersc/kotlin/kopy/playground/Bar| = R|<local>/bar|
            public get(): R|com/javiersc/kotlin/kopy/playground/Bar|

        public final operator fun component1(): R|com/javiersc/kotlin/kopy/playground/Bar|

        public final fun copy(bar: R|com/javiersc/kotlin/kopy/playground/Bar| = this@R|com/javiersc/kotlin/kopy/playground/Foo|.R|com/javiersc/kotlin/kopy/playground/Foo.bar|): R|com/javiersc/kotlin/kopy/playground/Foo|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionCopy|() public final infix fun copy(copy: R|com/javiersc/kotlin/kopy/playground/Foo.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Foo| {
        }

        internal final val _atomic: R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/Foo>|
            internal get(): R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/Foo>|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionInvoke|() public final operator infix fun invoke(copy: R|com/javiersc/kotlin/kopy/playground/Foo.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Foo| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionSet|() public final infix fun <S> R|S|.set(other: R|S|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdate|() public final infix fun <U> R|U|.update(transform: R|(U) -> U|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdateEach|() public final infix fun <UE> R|kotlin/collections/Iterable<UE>|.updateEach(transform: R|(UE) -> UE|): R|kotlin/Unit| {
        }

    }
    @R|com/javiersc/kotlin/kopy/Kopy|() @R|kotlinx/serialization/Serializable|() public final data class Bar : R|kotlin/Any| {
        public constructor(age: R|kotlin/Int|): R|com/javiersc/kotlin/kopy/playground/Bar| {
            super<R|kotlin/Any|>()
        }

        public final val age: R|kotlin/Int| = R|<local>/age|
            public get(): R|kotlin/Int|

        public final operator fun component1(): R|kotlin/Int|

        public final fun copy(age: R|kotlin/Int| = this@R|com/javiersc/kotlin/kopy/playground/Bar|.R|com/javiersc/kotlin/kopy/playground/Bar.age|): R|com/javiersc/kotlin/kopy/playground/Bar|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionCopy|() public final infix fun copy(copy: R|com/javiersc/kotlin/kopy/playground/Bar.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Bar| {
        }

        @R|kotlinx/serialization/Transient|() internal final val _atomic: R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/Bar>|
            internal get(): R|kotlin/concurrent/atomics/AtomicReference<com/javiersc/kotlin/kopy/playground/Bar>|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionInvoke|() public final operator infix fun invoke(copy: R|com/javiersc/kotlin/kopy/playground/Bar.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Bar| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionSet|() public final infix fun <S> R|S|.set(other: R|S|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdate|() public final infix fun <U> R|U|.update(transform: R|(U) -> U|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdateEach|() public final infix fun <UE> R|kotlin/collections/Iterable<UE>|.updateEach(transform: R|(UE) -> UE|): R|kotlin/Unit| {
        }

    }
