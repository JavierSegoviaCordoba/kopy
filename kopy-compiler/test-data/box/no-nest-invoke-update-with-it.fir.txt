FILE: no-nest-invoke-update-with-it.kt
    package com.javiersc.kotlin.kopy.playground

    public final fun box(): R|kotlin/String| {
        lval house0: R|com/javiersc/kotlin/kopy/playground/House| = R|com/javiersc/kotlin/kopy/playground/House.House|(street = String(Street), squareMeters = Int(20))
        lval house1: R|com/javiersc/kotlin/kopy/playground/House| = R|<local>/house0|.R|SubstitutionOverride<com/javiersc/kotlin/kopy/playground/House.invoke: R|com/javiersc/kotlin/kopy/playground/House|>|(<L> = house0@fun R|com/javiersc/kotlin/kopy/playground/House|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            (this@R|special/anonymous|, this@R|special/anonymous|.R|com/javiersc/kotlin/kopy/playground/House.squareMeters|).R|SubstitutionOverride<com/javiersc/kotlin/kopy/playground/House.update: R|R|>|<R|kotlin/Int|>(<L> = update@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
                ^ R|<local>/it|.R|kotlin/Int.plus|(Int(20))
            }
            )
        }
        )
        lval house2: R|com/javiersc/kotlin/kopy/playground/House| = R|<local>/house0|.R|kotlin/run|<R|com/javiersc/kotlin/kopy/playground/House|, R|com/javiersc/kotlin/kopy/playground/House|>(<L> = run@fun R|com/javiersc/kotlin/kopy/playground/House|.<anonymous>(): R|com/javiersc/kotlin/kopy/playground/House| <inline=Inline, kind=EXACTLY_ONCE>  {
            lvar tmp0: R|com/javiersc/kotlin/kopy/playground/House| = this@R|special/anonymous|
            R|<local>/tmp0| = R|<local>/tmp0|.R|com/javiersc/kotlin/kopy/playground/House.copy|(squareMeters = R|<local>/tmp0|.R|com/javiersc/kotlin/kopy/playground/House.squareMeters|.R|kotlin/let|<R|kotlin/Int|, R|kotlin/Int|>(<L> = let@fun <anonymous>(it: R|kotlin/Int|): R|kotlin/Int| <inline=Inline, kind=EXACTLY_ONCE>  {
                ^ R|<local>/it|.R|kotlin/Int.plus|(Int(20))
            }
            ))
            ^ R|<local>/tmp0|
        }
        )
        ^box when () {
            ==(R|<local>/house1|, R|<local>/house2|) ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: ), Char(10), String(House1: ), R|<local>/house1|, String( ), Char(10), String(House2: ), R|<local>/house2|)
            }
        }

    }
    @R|com/javiersc/kotlin/kopy/Kopy|() internal final data class House : R|kotlin/Any|, R|com/javiersc/kotlin/kopy/runtime/Kopyable<com/javiersc/kotlin/kopy/playground/House>| {
        public constructor(street: R|kotlin/String|, squareMeters: R|kotlin/Int|): R|com/javiersc/kotlin/kopy/playground/House| {
            super<R|kotlin/Any|>()
        }

        public final val street: R|kotlin/String| = R|<local>/street|
            public get(): R|kotlin/String|

        public final val squareMeters: R|kotlin/Int| = R|<local>/squareMeters|
            public get(): R|kotlin/Int|

        public final operator fun component1(): R|kotlin/String|

        public final operator fun component2(): R|kotlin/Int|

        public final fun copy(street: R|kotlin/String| = this@R|com/javiersc/kotlin/kopy/playground/House|.R|com/javiersc/kotlin/kopy/playground/House.street|, squareMeters: R|kotlin/Int| = this@R|com/javiersc/kotlin/kopy/playground/House|.R|com/javiersc/kotlin/kopy/playground/House.squareMeters|): R|com/javiersc/kotlin/kopy/playground/House|

    }
