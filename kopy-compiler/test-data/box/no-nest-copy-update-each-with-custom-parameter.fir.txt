FILE: no-nest-copy-update-each-with-custom-parameter.kt
    package com.javiersc.kotlin.kopy.playground

    public final fun box(): R|kotlin/String| {
        lval foo0: R|com/javiersc/kotlin/kopy/playground/Foo| = R|com/javiersc/kotlin/kopy/playground/Foo.Foo|(R|kotlin/collections/listOf|<R|kotlin/Int|>(vararg(Int(7), Int(3))), R|kotlin/collections/listOf|<R|kotlin/Char|>(Char(W)))
        lval foo21: R|com/javiersc/kotlin/kopy/playground/Foo| = R|<local>/foo0|.R|com/javiersc/kotlin/kopy/playground/Foo.copy|(copy@fun R|com/javiersc/kotlin/kopy/playground/Foo|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            (this@R|special/anonymous|, this@R|special/anonymous|.R|com/javiersc/kotlin/kopy/playground/Foo.numbers|).R|com/javiersc/kotlin/kopy/playground/Foo.updateEach|<R|kotlin/Int|>(<L> = updateEach@fun <anonymous>(num: R|kotlin/Int|): R|kotlin/Int| <inline=NoInline>  {
                ^ R|<local>/num|.R|kotlin/Int.plus|(Int(42))
            }
            )
        }
        )
        lval isOk: R|kotlin/Boolean| = ==(R|<local>/foo21|.R|com/javiersc/kotlin/kopy/playground/Foo.numbers|, R|kotlin/collections/listOf|<R|kotlin/Int|>(vararg(Int(49), Int(45))))
        ^box when () {
            R|<local>/isOk| ->  {
                String(OK)
            }
            else ->  {
                <strcat>(String(Fail: numbers are ), R|<local>/foo21|.R|com/javiersc/kotlin/kopy/playground/Foo.numbers|, String( instead of 49 and 45))
            }
        }

    }
    @R|com/javiersc/kotlin/kopy/Kopy|() public final data class Foo : R|kotlin/Any| {
        public constructor(numbers: R|kotlin/collections/List<kotlin/Int>|, letters: R|kotlin/collections/List<kotlin/Char>|): R|com/javiersc/kotlin/kopy/playground/Foo| {
            super<R|kotlin/Any|>()
        }

        public final val numbers: R|kotlin/collections/List<kotlin/Int>| = R|<local>/numbers|
            public get(): R|kotlin/collections/List<kotlin/Int>|

        public final val letters: R|kotlin/collections/List<kotlin/Char>| = R|<local>/letters|
            public get(): R|kotlin/collections/List<kotlin/Char>|

        public final operator fun component1(): R|kotlin/collections/List<kotlin/Int>|

        public final operator fun component2(): R|kotlin/collections/List<kotlin/Char>|

        public final fun copy(numbers: R|kotlin/collections/List<kotlin/Int>| = this@R|com/javiersc/kotlin/kopy/playground/Foo|.R|com/javiersc/kotlin/kopy/playground/Foo.numbers|, letters: R|kotlin/collections/List<kotlin/Char>| = this@R|com/javiersc/kotlin/kopy/playground/Foo|.R|com/javiersc/kotlin/kopy/playground/Foo.letters|): R|com/javiersc/kotlin/kopy/playground/Foo|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdate|() public final infix fun <U> R|U|.update(transform: R|(U) -> U|): R|kotlin/Unit| {
        }

        internal final val _atomic: R|kotlinx/atomicfu/AtomicRef<com/javiersc/kotlin/kopy/playground/Foo>|
            internal get(): R|kotlinx/atomicfu/AtomicRef<com/javiersc/kotlin/kopy/playground/Foo>|

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionSet|() public final infix fun <S> R|S|.set(other: R|S|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionCopy|() public final infix fun copy(copy: R|com/javiersc/kotlin/kopy/playground/Foo.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Foo| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionUpdateEach|() public final infix fun <UE> R|kotlin/collections/Iterable<UE>|.updateEach(transform: R|(UE) -> UE|): R|kotlin/Unit| {
        }

        @R|com/javiersc/kotlin/kopy/KopyOptIn|() @R|com/javiersc/kotlin/kopy/KopyFunctionInvoke|() public final operator infix fun invoke(copy: R|com/javiersc/kotlin/kopy/playground/Foo.() -> kotlin/Unit|): R|com/javiersc/kotlin/kopy/playground/Foo| {
        }

    }
